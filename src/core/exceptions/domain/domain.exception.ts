export enum DomainExceptionCode {
    DEFAULT = 'DEFAULT',
    UUID_ID_INVALID = 'UUID_ID_INVALID',
    WAREHOUSE_ID_INVALID_EXCEPTION = 'WAREHOUSE_ID_INVALID_EXCEPTION',
    WAREHOUSE_NAME_EMPTY_EXCEPTION = 'WAREHOUSE_NAME_EMPTY_EXCEPTION',
    WAREHOUSE_CITY_EMPTY_EXCEPTION = 'WAREHOUSE_CITY_EMPTY_EXCEPTION',
    WAREHOUSE_TOTAL_MILKS_EMPTY_EXCEPTION = 'WAREHOUSE_TOTAL_MILKS_EMPTY_EXCEPTION',
    WAREHOUSE_TOTAL_MILKS_NOT_VALID_EXCEPTION = 'WAREHOUSE_TOTAL_MILKS_NOT_VALID_EXCEPTION',
    WAREHOUSE_FIXED_PRICE_MILK_EMPTY_EXCEPTION = 'WAREHOUSE_FIXED_PRICE_MILK_EMPTY_EXCEPTION',
    WAREHOUSE_FIXED_PRICE_MILK_NOT_VALID_EXCEPTION = 'WAREHOUSE_FIXED_PRICE_MILK_NOT_VALID_EXCEPTION',
    STORE_ID_INVALID_EXCEPTION = 'STORE_ID_INVALID_EXCEPTION',
    STORE_NAME_EMPTY_EXCEPTION = 'STORE_NAME_EMPTY_EXCEPTION',
    STORE_NEIGHBORHOOD_EMPTY_EXCEPTION = 'STORE_NEIGHBORHOOD_EMPTY_EXCEPTION',
    STORE_NOBAGMILKSTOSALE_EMPTY_EXCEPTION = 'STORE_NOBAGMILKSTOSALE_EMPTY_EXCEPTION',
    STORE_NOBAGMILKSTOSALE_NOT_VALID_EXCEPTION = 'STORE_NOBAGMILKSTOSALE_NOT_VALID_EXCEPTION',
}

export abstract class DomainException extends Error {

    constructor(message?: string) {
        super(message);
        this.name = DomainExceptionCode.DEFAULT;
    }
}